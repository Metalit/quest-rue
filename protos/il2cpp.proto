syntax = "proto3";

// optional = nullable
// may change in future!

// --- Type Identification ---

message ProtoClassInfo {
    string namespaze = 1;
    string clazz = 2;
    repeated ProtoTypeInfo generics = 3;
}

message ProtoStructInfo {
    ProtoClassInfo clazz = 1;

    map<int32, ProtoFieldInfo> fieldOffsets = 2;
}

message ProtoArrayInfo {
    ProtoTypeInfo memberType = 1;
}

message ProtoGenericInfo {
    uint64 genericHandle = 1;
    string name = 2;
}

message ProtoEnumInfo {
    ProtoClassInfo clazz = 1;
    ProtoTypeInfo.Primitive valueType = 2;

    map<string, int64> values = 3;
}

message ProtoTypeInfo {
    enum Primitive { // TODO: maybe add more primitives
        BOOLEAN = 0;
        CHAR = 1;
        BYTE = 2;
        SHORT = 3;
        INT = 4;
        LONG = 5;
        FLOAT = 6;
        DOUBLE = 7;
        STRING = 8;
        TYPE = 9;
        PTR = 10; // TODO: maybe separate and add pointed to type
        VOID = 11;
        UNKNOWN = 12;
    }
    enum Byref {
        NONE = 0;
        REF = 1;
        IN = 2;
        OUT = 3;
    }
    oneof Info {
        Primitive primitiveInfo = 1;
        ProtoArrayInfo arrayInfo = 2;
        ProtoStructInfo structInfo = 3;
        ProtoClassInfo classInfo = 4;
        ProtoGenericInfo genericInfo = 5;
        ProtoEnumInfo enumInfo = 6;
    }
    int32 size = 7;
    Byref byref_ = 8; // conflicts with bshook byref macro
}

// --- Class Details ---

// id = pointer address of info
message ProtoFieldInfo {
    string name = 1;
    uint64 id = 2;
    ProtoTypeInfo type = 3;
    // aka const, I think
    bool literal = 4;
    bool readonly = 5;
}

message ProtoPropertyInfo {
    string name = 1;
    uint64 id = 2;
    ProtoTypeInfo type = 3;
    optional uint64 getterId = 4;
    optional uint64 setterId = 5;
    optional uint64 backingFieldId = 6;
}

message ProtoMethodInfo {
    message Argument {
        string name = 1;
        ProtoTypeInfo type = 2;
    }

    string name = 1;
    uint64 id = 2;

    repeated Argument args = 3;
    ProtoTypeInfo returnType = 4;
}

// contains the class data in its entirety for non-primitives
message ProtoClassDetails {
    ProtoClassInfo clazz = 1;

    repeated ProtoFieldInfo fields = 2;
    repeated ProtoPropertyInfo properties = 3;
    repeated ProtoMethodInfo methods = 4;

    repeated ProtoFieldInfo staticFields = 5;
    repeated ProtoPropertyInfo staticProperties = 6;
    repeated ProtoMethodInfo staticMethods = 7;

    repeated ProtoClassInfo interfaces = 8;

    optional ProtoClassDetails parent = 9;
}

// --- Data Sending ---

// separate from payload because the typeInfo never needs to be nested
message ProtoDataSegment {
    // repeated fields aren't allowed directly in oneOf
    message ArrayData {
        repeated ProtoDataSegment data = 1;
    }
    message StructData {
        map<int32, ProtoDataSegment> data = 1;
    }
    oneof Data {
        bytes primitiveData = 1; /* simpler than having another oneof for each primitive case */
        ArrayData arrayData = 2;
        StructData structData = 3;
        uint64 classData = 4; /* object pointer */
        // enums use primitiveData
    }
}

message ProtoDataPayload {
    ProtoTypeInfo typeInfo = 1;
    ProtoDataSegment data = 2;
}
